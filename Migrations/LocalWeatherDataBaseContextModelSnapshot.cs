// <auto-generated />
using System;
using LocalWeatherAPI.DataBaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LocalWeatherAPI.Migrations
{
    [DbContext(typeof(LocalWeatherDataBaseContext))]
    partial class LocalWeatherDataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DayNumber")
                        .HasColumnType("integer");

                    b.Property<int>("MonthId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MonthId");

                    b.ToTable("DailyWeatherData");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Hour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DayId")
                        .HasColumnType("integer");

                    b.Property<int>("HourTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("HourlyWeatherData");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Month", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer");

                    b.Property<int>("YearId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("MonthlyWeatherData");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Weather", b =>
                {
                    b.Property<DateTime>("DateTimeStampID")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HourId")
                        .HasColumnType("integer");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision");

                    b.Property<double>("Pressure")
                        .HasColumnType("double precision");

                    b.Property<double>("Temp")
                        .HasColumnType("double precision");

                    b.Property<int>("Time")
                        .HasColumnType("integer");

                    b.HasKey("DateTimeStampID");

                    b.HasIndex("HourId");

                    b.ToTable("WeatherData");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Year", b =>
                {
                    b.Property<int>("YearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("YearId"));

                    b.HasKey("YearId");

                    b.ToTable("YearlyWeatherData");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Day", b =>
                {
                    b.HasOne("LocalWeatherAPI.DataModel.Month", "Month")
                        .WithMany("Days")
                        .HasForeignKey("MonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Month");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Hour", b =>
                {
                    b.HasOne("LocalWeatherAPI.DataModel.Day", "Day")
                        .WithMany("DailyWeather")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Month", b =>
                {
                    b.HasOne("LocalWeatherAPI.DataModel.Year", "Year")
                        .WithMany("Months")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Weather", b =>
                {
                    b.HasOne("LocalWeatherAPI.DataModel.Hour", "Hour")
                        .WithMany("HourlyWeather")
                        .HasForeignKey("HourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hour");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Day", b =>
                {
                    b.Navigation("DailyWeather");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Hour", b =>
                {
                    b.Navigation("HourlyWeather");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Month", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("LocalWeatherAPI.DataModel.Year", b =>
                {
                    b.Navigation("Months");
                });
#pragma warning restore 612, 618
        }
    }
}
